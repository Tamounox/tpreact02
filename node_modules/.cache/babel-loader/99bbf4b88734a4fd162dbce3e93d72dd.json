{"ast":null,"code":"var _jsxFileName = \"/Users/igor/react/tptest/src/features/Responsive/Responsive.js\";\nimport React from 'react';\nimport { Box, Grid, Heading, ResponsiveContext } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils'; // Two responsive grids\n//    - First one with a known number of elements\n//    - Second one with an unknown number of elements\n// set custom breakpoints so we can see the changes\n\nconst customBreakpoints = deepMerge(grommet, {\n  global: {\n    breakpoints: {\n      small: {\n        value: 600\n      },\n      medium: {\n        value: 900\n      },\n      large: {\n        value: 3000\n      }\n    }\n  }\n}); // Set the different areas you need for every size\n\nconst fixedGridAreas = {\n  small: [{\n    name: 'header',\n    start: [0, 0],\n    end: [0, 0]\n  }, {\n    name: 'test',\n    start: [0, 1],\n    end: [0, 1]\n  }, {\n    name: 'test1',\n    start: [0, 2],\n    end: [0, 2]\n  }],\n  medium: [{\n    name: 'header',\n    start: [0, 0],\n    end: [1, 0]\n  }, {\n    name: 'test',\n    start: [0, 1],\n    end: [0, 1]\n  }, {\n    name: 'test1',\n    start: [1, 1],\n    end: [1, 1]\n  }],\n  large: [{\n    name: 'header',\n    start: [0, 0],\n    end: [0, 0]\n  }, {\n    name: 'test',\n    start: [1, 0],\n    end: [1, 0]\n  }, {\n    name: 'test1',\n    start: [2, 0],\n    end: [2, 0]\n  }],\n  xlarge: [{\n    name: 'header',\n    start: [0, 0],\n    end: [0, 0]\n  }, {\n    name: 'test',\n    start: [1, 0],\n    end: [1, 0]\n  }, {\n    name: 'test1',\n    start: [2, 0],\n    end: [2, 0]\n  }]\n}; // columns, rows and areas are for Grid with a known number of contents / boxes.\n// If the size is small, we only see 1 column\n// If the size is medium, we only see 2 columns\n// If the size is either large or xlarge, we see 3 columns\n\nconst columns = {\n  small: ['auto'],\n  large: ['auto', 'auto']\n}; // If the size is small, we have 3 rows\n// If the size is medium, we have 2 rows\n// If the size is large or xlarge, we have 1 row\n\nconst rows = {\n  small: ['xsmall', 'xsmall'],\n  large: ['xsmall']\n};\n\nconst Responsive = ({\n  children,\n  overrideColumns,\n  overrideRows,\n  areas,\n  ...props\n}) => /*#__PURE__*/React.createElement(ResponsiveContext.Consumer, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }\n}, size => {\n  // Take into consideration if not array is sent but a simple string\n  let columnsVal = columns;\n\n  if (columns) {\n    if (columns[size]) {\n      columnsVal = columns[size];\n    }\n  }\n\n  let rowsVal = rows;\n\n  if (rows) {\n    if (rows[size]) {\n      rowsVal = rows[size];\n    }\n  } // Also if areas is a simple array not an object of arrays for\n  // different sizes\n\n\n  let areasVal = areas;\n  if (areas && !Array.isArray(areas)) areasVal = areas[size];\n  return /*#__PURE__*/React.createElement(Grid, {\n    rows: rows,\n    columns: columns,\n    gap: \"small\",\n    areas: fixedGridAreas,\n    margin: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, children);\n});\n\nexport default Responsive;","map":{"version":3,"sources":["/Users/igor/react/tptest/src/features/Responsive/Responsive.js"],"names":["React","Box","Grid","Heading","ResponsiveContext","grommet","deepMerge","customBreakpoints","global","breakpoints","small","value","medium","large","fixedGridAreas","name","start","end","xlarge","columns","rows","Responsive","children","overrideColumns","overrideRows","areas","props","size","columnsVal","rowsVal","areasVal","Array","isArray"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Box, Grid, Heading, ResponsiveContext } from 'grommet';\n\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\n\n// Two responsive grids\n//    - First one with a known number of elements\n//    - Second one with an unknown number of elements\n\n// set custom breakpoints so we can see the changes\nconst customBreakpoints = deepMerge(grommet, {\n  global: {\n    breakpoints: {\n      small: {\n        value: 600,\n      },\n      medium: {\n        value: 900,\n      },\n      large: {\n        value: 3000,\n      },\n    },\n  },\n});\n\n// Set the different areas you need for every size\nconst fixedGridAreas = {\n    small: [\n      { name: 'header', start: [0, 0], end: [0, 0] },\n      { name: 'test', start: [0, 1], end: [0, 1] },\n      { name: 'test1', start: [0, 2], end: [0, 2] },\n    ],\n    medium: [\n      { name: 'header', start: [0, 0], end: [1, 0] },\n      { name: 'test', start: [0, 1], end: [0, 1] },\n      { name: 'test1', start: [1, 1], end: [1, 1] },\n    ],\n    large: [\n      { name: 'header', start: [0, 0], end: [0, 0] },\n      { name: 'test', start: [1, 0], end: [1, 0] },\n      { name: 'test1', start: [2, 0], end: [2, 0] },\n    ],\n    xlarge: [\n      { name: 'header', start: [0, 0], end: [0, 0] },\n      { name: 'test', start: [1, 0], end: [1, 0] },\n      { name: 'test1', start: [2, 0], end: [2, 0] },\n    ],\n  };\n\n// columns, rows and areas are for Grid with a known number of contents / boxes.\n\n// If the size is small, we only see 1 column\n// If the size is medium, we only see 2 columns\n// If the size is either large or xlarge, we see 3 columns\nconst columns = {\n  small: ['auto'],\n  large: ['auto', 'auto'],\n};\n\n// If the size is small, we have 3 rows\n// If the size is medium, we have 2 rows\n// If the size is large or xlarge, we have 1 row\nconst rows = {\n  small: ['xsmall', 'xsmall'],\n  large: ['xsmall'],\n};\n\nconst Responsive = ({\n  children,\n  overrideColumns,\n  overrideRows,\n  areas,\n  ...props\n}) => (\n  <ResponsiveContext.Consumer>\n    {size => {\n      // Take into consideration if not array is sent but a simple string\n      let columnsVal = columns;\n      if (columns) {\n        if (columns[size]) {\n          columnsVal = columns[size];\n        }\n      }\n\n      let rowsVal = rows;\n      if (rows) {\n        if (rows[size]) {\n          rowsVal = rows[size];\n        }\n      }\n\n      // Also if areas is a simple array not an object of arrays for\n      // different sizes\n      let areasVal = areas;\n      if (areas && !Array.isArray(areas)) areasVal = areas[size];\n\n      return (\n        <Grid\n        rows={rows}\n        columns={columns}\n        gap=\"small\"\n        areas={fixedGridAreas}\n        margin=\"medium\"\n        >\n          {children}\n        </Grid>\n      );\n    }}\n  </ResponsiveContext.Consumer>\n);\n\nexport default Responsive"]},"metadata":{},"sourceType":"module"}