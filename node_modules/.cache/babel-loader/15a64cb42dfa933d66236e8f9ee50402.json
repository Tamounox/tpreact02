{"ast":null,"code":"var _jsxFileName = \"/Users/igor/react/tptest/src/features/Body/Graph.js\";\nimport React from 'react';\nimport { Box, DataChart, Grommet } from 'grommet';\nimport { grommet } from 'grommet/themes';\nconst data = [];\n\nfor (let i = 0; i < 13; i += 1) {\n  const v = -Math.sin(i / 2.0);\n  const v2 = Math.cos(i / 2.0);\n  data.push({\n    date: `2020-07-${(i % 30 + 1).toString().padStart(2, 0)}`,\n    amount: Math.floor(v * 10),\n    need: Math.floor(v2 * 9),\n    needMax: Math.floor(v2 * 9) + i / 2,\n    needMin: Math.floor(v2 * 9) - i / 2,\n    growth: i\n  });\n}\n\nconst Graph = () => /*#__PURE__*/React.createElement(Grommet, {\n  theme: grommet,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Box, {\n  align: \"center\",\n  justify: \"start\",\n  pad: \"large\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(DataChart, {\n  data: data,\n  series: ['date', 'amount', 'need', 'growth'],\n  bounds: \"align\",\n  chart: [{\n    property: 'amount',\n    type: 'area',\n    thickness: 'xsmall',\n    color: 'graph-2',\n    opacity: 'medium'\n  }, {\n    property: 'amount',\n    type: 'line',\n    thickness: 'xxsmall',\n    round: true\n  }, {\n    property: 'amount',\n    type: 'bar',\n    thickness: 'hair'\n  }, {\n    property: 'amount',\n    type: 'point',\n    thickness: 'small'\n  }, {\n    property: ['needMin', 'needMax'],\n    type: 'area',\n    thickness: 'xsmall',\n    color: 'graph-3',\n    opacity: 'medium'\n  }, {\n    property: 'need',\n    type: 'line',\n    thickness: 'xxsmall',\n    dash: true,\n    round: true\n  }, {\n    property: 'need',\n    type: 'point',\n    thickness: 'small'\n  }, {\n    property: 'growth',\n    type: 'line',\n    thickness: 'hair'\n  }],\n  axis: {\n    x: 'date',\n    y: {\n      property: 'amount',\n      granularity: 'medium'\n    }\n  },\n  guide: {\n    y: {\n      granularity: 'medium'\n    },\n    x: {\n      granularity: 'fine'\n    }\n  },\n  gap: \"xsmall\",\n  pad: \"small\",\n  legend: true,\n  detail: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }\n})));\n\nexport default Graph;","map":{"version":3,"sources":["/Users/igor/react/tptest/src/features/Body/Graph.js"],"names":["React","Box","DataChart","Grommet","grommet","data","i","v","Math","sin","v2","cos","push","date","toString","padStart","amount","floor","need","needMax","needMin","growth","Graph","property","type","thickness","color","opacity","round","dash","x","y","granularity"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, DataChart, Grommet } from 'grommet';\nimport { grommet } from 'grommet/themes';\n\nconst data = [];\nfor (let i = 0; i < 13; i += 1) {\n  const v = -Math.sin(i / 2.0);\n  const v2 = Math.cos(i / 2.0);\n  data.push({\n    date: `2020-07-${((i % 30) + 1).toString().padStart(2, 0)}`,\n    amount: Math.floor(v * 10),\n    need: Math.floor(v2 * 9),\n    needMax: Math.floor(v2 * 9) + i / 2,\n    needMin: Math.floor(v2 * 9) - i / 2,\n    growth: i,\n  });\n}\n\nconst Graph = () => (\n  <Grommet theme={grommet}>\n    <Box align=\"center\" justify=\"start\" pad=\"large\">\n      <DataChart\n        data={data}\n        series={['date', 'amount', 'need', 'growth']}\n        bounds=\"align\"\n        chart={[\n          {\n            property: 'amount',\n            type: 'area',\n            thickness: 'xsmall',\n            color: 'graph-2',\n            opacity: 'medium',\n          },\n          {\n            property: 'amount',\n            type: 'line',\n            thickness: 'xxsmall',\n            round: true,\n          },\n          { property: 'amount', type: 'bar', thickness: 'hair' },\n          { property: 'amount', type: 'point', thickness: 'small' },\n          {\n            property: ['needMin', 'needMax'],\n            type: 'area',\n            thickness: 'xsmall',\n            color: 'graph-3',\n            opacity: 'medium',\n          },\n          {\n            property: 'need',\n            type: 'line',\n            thickness: 'xxsmall',\n            dash: true,\n            round: true,\n          },\n          { property: 'need', type: 'point', thickness: 'small' },\n          { property: 'growth', type: 'line', thickness: 'hair' },\n        ]}\n        axis={{ x: 'date', y: { property: 'amount', granularity: 'medium' } }}\n        guide={{ y: { granularity: 'medium' }, x: { granularity: 'fine' } }}\n        gap=\"xsmall\"\n        pad=\"small\"\n        legend\n        detail\n      />\n    </Box>\n  </Grommet>\n);\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}